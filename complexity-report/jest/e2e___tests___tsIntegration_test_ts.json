[{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.002,"difficulty":0.5,"effort":2.377,"length":3,"time":0.132,"vocabulary":3,"volume":4.755,"operands":{"distinct":2,"total":2,"identifiers":["cleanup","DIR"]},"operators":{"distinct":1,"total":1,"identifiers":["()"]}},"paramCount":0,"sloc":{"logical":2,"physical":1},"errors":[],"lineEnd":15,"lineStart":15,"name":"<anon method-1>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.002,"difficulty":0.5,"effort":2.377,"length":3,"time":0.132,"vocabulary":3,"volume":4.755,"operands":{"distinct":2,"total":2,"identifiers":["cleanup","DIR"]},"operators":{"distinct":1,"total":1,"identifiers":["()"]}},"paramCount":0,"sloc":{"logical":2,"physical":1},"errors":[],"lineEnd":16,"lineStart":16,"name":"<anon method-2>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.021,"difficulty":1.429,"effort":90.569,"length":20,"time":5.032,"vocabulary":9,"volume":63.399,"operands":{"distinct":7,"total":10,"identifiers":["test","\"with object config exported from TS file\"","\"with function config exported from TS file\"","\"throws if type errors are encountered\"","\"throws if syntax errors are encountered\"","onNodeVersions","\">=12.16.0\""]},"operators":{"distinct":2,"total":10,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":10,"physical":159},"errors":[],"lineEnd":176,"lineStart":18,"name":"<anon method-3>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.092,"difficulty":5.565,"effort":1543.986,"length":56,"time":85.777,"vocabulary":31,"volume":277.435,"operands":{"distinct":23,"total":32,"identifiers":["writeFiles","DIR","\"__tests__/dummy.test.js\"","\"test('dummy', () => expect(123).toBe(123));\"","\"jest.config.ts\"","\n        import type {Config} from '@jest/types';\n        const config: Config.InitialOptions = {displayName: 'ts-object-config', verbose: true};\n        export default config;\n        ","\"package.json\"","\"{}\"","configs","globalConfig","getConfig","path","join","expect","toHaveLength","1","0","displayName","name","toBe","\"ts-object-config\"","verbose","true"]},"operators":{"distinct":8,"total":24,"identifiers":["()","{}",":","``","const","=",".","[]"]}},"paramCount":0,"sloc":{"logical":15,"physical":17},"errors":[],"lineEnd":35,"lineStart":19,"name":"<anon method-4>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.092,"difficulty":5.565,"effort":1543.986,"length":56,"time":85.777,"vocabulary":31,"volume":277.435,"operands":{"distinct":23,"total":32,"identifiers":["writeFiles","DIR","\"__tests__/dummy.test.js\"","\"test('dummy', () => expect(123).toBe(123));\"","\"jest.config.ts\"","\n        import type {Config} from '@jest/types';\n        async function getVerbose() {return true;}\n        export default async (): Promise<Config.InitialOptions> => {\n          const verbose: Config.InitialOptions['verbose'] = await getVerbose();\n          return {displayName: 'ts-async-function-config', verbose};\n        };\n        ","\"package.json\"","\"{}\"","configs","globalConfig","getConfig","path","join","expect","toHaveLength","1","0","displayName","name","toBe","\"ts-async-function-config\"","verbose","true"]},"operators":{"distinct":8,"total":24,"identifiers":["()","{}",":","``","const","=",".","[]"]}},"paramCount":0,"sloc":{"logical":15,"physical":20},"errors":[],"lineEnd":56,"lineStart":37,"name":"<anon method-5>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.057,"difficulty":4.813,"effort":827.246,"length":38,"time":45.958,"vocabulary":23,"volume":171.895,"operands":{"distinct":16,"total":22,"identifiers":["writeFiles","DIR","\"__tests__/dummy.test.js\"","\"test('dummy', () => expect(123).toBe(123));\"","\"jest.config.ts\"","\n        import type {Config} from '@jest/types';\n        const config: Config.InitialOptions = {testTimeout: '10000'};\n        export default config;\n        ","\"package.json\"","\"{}\"","stderr","exitCode","runJest","expect","toMatch","\"jest.config.ts(2,40): error TS2322: Type 'string' is not assignable to type 'number'.\"","toBe","1"]},"operators":{"distinct":7,"total":16,"identifiers":["()","{}",":","``","const","=","."]}},"paramCount":0,"sloc":{"logical":12,"physical":18},"errors":[],"lineEnd":75,"lineStart":58,"name":"<anon method-6>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.057,"difficulty":4.813,"effort":827.246,"length":38,"time":45.958,"vocabulary":23,"volume":171.895,"operands":{"distinct":16,"total":22,"identifiers":["writeFiles","DIR","\"__tests__/dummy.test.js\"","\"test('dummy', () => expect(123).toBe(123));\"","\"jest.config.ts\"","\n        import type {Config} from '@jest/types';\n        const config: Config.InitialOptions = {verbose: true};\n        export default get config;\n        ","\"package.json\"","\"{}\"","stderr","exitCode","runJest","expect","toMatch","\"jest.config.ts(3,16): error TS2304: Cannot find name 'get'.\"","toBe","1"]},"operators":{"distinct":7,"total":16,"identifiers":["()","{}",":","``","const","=","."]}},"paramCount":0,"sloc":{"logical":12,"physical":18},"errors":[],"lineEnd":94,"lineStart":77,"name":"<anon method-7>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["test","\"works with object config exported from TS file when package.json#type=module\"","\"works with function config exported from TS file when package.json#type=module\"","\"throws if type errors are encountered when package.json#type=module\"","\"throws if syntax errors are encountered when package.json#type=module\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":8,"physical":79},"errors":[],"lineEnd":175,"lineStart":97,"name":"<anon method-8>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.092,"difficulty":5.565,"effort":1543.986,"length":56,"time":85.777,"vocabulary":31,"volume":277.435,"operands":{"distinct":23,"total":32,"identifiers":["writeFiles","DIR","\"__tests__/dummy.test.js\"","\"test('dummy', () => expect(12).toBe(12));\"","\"jest.config.ts\"","\n          import type {Config} from '@jest/types';\n          const config: Config.InitialOptions = {displayName: 'ts-esm-object-config', verbose: true};\n          export default config;\n          ","\"package.json\"","\"{\"type\": \"module\"}\"","configs","globalConfig","getConfig","path","join","expect","toHaveLength","1","0","displayName","name","toBe","\"ts-esm-object-config\"","verbose","true"]},"operators":{"distinct":8,"total":24,"identifiers":["()","{}",":","``","const","=",".","[]"]}},"paramCount":0,"sloc":{"logical":15,"physical":17},"errors":[],"lineEnd":114,"lineStart":98,"name":"<anon method-9>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.092,"difficulty":5.565,"effort":1543.986,"length":56,"time":85.777,"vocabulary":31,"volume":277.435,"operands":{"distinct":23,"total":32,"identifiers":["writeFiles","DIR","\"__tests__/dummy.test.js\"","\"test('dummy', () => expect(12).toBe(12));\"","\"jest.config.ts\"","\n          import type {Config} from '@jest/types';\n          async function getVerbose() {return true;}\n          export default async (): Promise<Config.InitialOptions> => {\n            const verbose: Config.InitialOptions['verbose'] = await getVerbose();\n            return {displayName: 'ts-esm-async-function-config', verbose};\n          };\n          ","\"package.json\"","\"{\"type\": \"module\"}\"","configs","globalConfig","getConfig","path","join","expect","toHaveLength","1","0","displayName","name","toBe","\"ts-esm-async-function-config\"","verbose","true"]},"operators":{"distinct":8,"total":24,"identifiers":["()","{}",":","``","const","=",".","[]"]}},"paramCount":0,"sloc":{"logical":15,"physical":20},"errors":[],"lineEnd":135,"lineStart":116,"name":"<anon method-10>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.057,"difficulty":4.813,"effort":827.246,"length":38,"time":45.958,"vocabulary":23,"volume":171.895,"operands":{"distinct":16,"total":22,"identifiers":["writeFiles","DIR","\"__tests__/dummy.test.js\"","\"test('dummy', () => expect(12).toBe(12));\"","\"jest.config.ts\"","\n          import type {Config} from '@jest/types';\n          const config: Config.InitialOptions = {testTimeout: '10000'};\n          export default config;\n          ","\"package.json\"","\"{\"type\": \"module\"}\"","stderr","exitCode","runJest","expect","toMatch","\"jest.config.ts(2,40): error TS2322: Type 'string' is not assignable to type 'number'.\"","toBe","1"]},"operators":{"distinct":7,"total":16,"identifiers":["()","{}",":","``","const","=","."]}},"paramCount":0,"sloc":{"logical":12,"physical":18},"errors":[],"lineEnd":154,"lineStart":137,"name":"<anon method-11>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.057,"difficulty":4.813,"effort":827.246,"length":38,"time":45.958,"vocabulary":23,"volume":171.895,"operands":{"distinct":16,"total":22,"identifiers":["writeFiles","DIR","\"__tests__/dummy.test.js\"","\"test('dummy', () => expect(123).toBe(123));\"","\"jest.config.ts\"","\n          import type {Config} from '@jest/types';\n          const config: Config.InitialOptions = {verbose: true};\n          export default get config;\n          ","\"package.json\"","\"{}\"","stderr","exitCode","runJest","expect","toMatch","\"jest.config.ts(3,16): error TS2304: Cannot find name 'get'.\"","toBe","1"]},"operators":{"distinct":7,"total":16,"identifiers":["()","{}",":","``","const","=","."]}},"paramCount":0,"sloc":{"logical":12,"physical":19},"errors":[],"lineEnd":174,"lineStart":156,"name":"<anon method-12>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":10,"halstead":{"bugs":0.021,"difficulty":1.429,"effort":90.569,"length":20,"time":5.032,"vocabulary":9,"volume":63.399,"operands":{"distinct":7,"total":10,"identifiers":["test","\"with object config exported from TS file\"","\"with function config exported from TS file\"","\"throws if type errors are encountered\"","\"throws if syntax errors are encountered\"","onNodeVersions","\">=12.16.0\""]},"operators":{"distinct":2,"total":10,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":10,"physical":159},"errors":[],"lineEnd":336,"lineStart":178,"name":"<anon method-13>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.092,"difficulty":5.565,"effort":1543.986,"length":56,"time":85.777,"vocabulary":31,"volume":277.435,"operands":{"distinct":23,"total":32,"identifiers":["writeFiles","DIR","\"__tests__/dummy.test.js\"","\"test('dummy', () => expect(123).toBe(123));\"","\"jest.config.ts\"","\n        import type {Config} from 'jest';\n        const config: Config = {displayName: 'ts-object-config', verbose: true};\n        export default config;\n        ","\"package.json\"","\"{}\"","configs","globalConfig","getConfig","path","join","expect","toHaveLength","1","0","displayName","name","toBe","\"ts-object-config\"","verbose","true"]},"operators":{"distinct":8,"total":24,"identifiers":["()","{}",":","``","const","=",".","[]"]}},"paramCount":0,"sloc":{"logical":15,"physical":17},"errors":[],"lineEnd":195,"lineStart":179,"name":"<anon method-14>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.092,"difficulty":5.565,"effort":1543.986,"length":56,"time":85.777,"vocabulary":31,"volume":277.435,"operands":{"distinct":23,"total":32,"identifiers":["writeFiles","DIR","\"__tests__/dummy.test.js\"","\"test('dummy', () => expect(123).toBe(123));\"","\"jest.config.ts\"","\n        import type {Config} from 'jest';\n        async function getVerbose() {return true;}\n        export default async (): Promise<Config> => {\n          const verbose: Config['verbose'] = await getVerbose();\n          return {displayName: 'ts-async-function-config', verbose};\n        };\n        ","\"package.json\"","\"{}\"","configs","globalConfig","getConfig","path","join","expect","toHaveLength","1","0","displayName","name","toBe","\"ts-async-function-config\"","verbose","true"]},"operators":{"distinct":8,"total":24,"identifiers":["()","{}",":","``","const","=",".","[]"]}},"paramCount":0,"sloc":{"logical":15,"physical":20},"errors":[],"lineEnd":216,"lineStart":197,"name":"<anon method-15>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.057,"difficulty":4.813,"effort":827.246,"length":38,"time":45.958,"vocabulary":23,"volume":171.895,"operands":{"distinct":16,"total":22,"identifiers":["writeFiles","DIR","\"__tests__/dummy.test.js\"","\"test('dummy', () => expect(123).toBe(123));\"","\"jest.config.ts\"","\n        import type {Config} from 'jest';\n        const config: Config = {testTimeout: '10000'};\n        export default config;\n        ","\"package.json\"","\"{}\"","stderr","exitCode","runJest","expect","toMatch","\"jest.config.ts(2,25): error TS2322: Type 'string' is not assignable to type 'number'.\"","toBe","1"]},"operators":{"distinct":7,"total":16,"identifiers":["()","{}",":","``","const","=","."]}},"paramCount":0,"sloc":{"logical":12,"physical":18},"errors":[],"lineEnd":235,"lineStart":218,"name":"<anon method-16>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.057,"difficulty":4.813,"effort":827.246,"length":38,"time":45.958,"vocabulary":23,"volume":171.895,"operands":{"distinct":16,"total":22,"identifiers":["writeFiles","DIR","\"__tests__/dummy.test.js\"","\"test('dummy', () => expect(123).toBe(123));\"","\"jest.config.ts\"","\n        import type {Config} from 'jest';\n        const config: Config = {verbose: true};\n        export default get config;\n        ","\"package.json\"","\"{}\"","stderr","exitCode","runJest","expect","toMatch","\"jest.config.ts(3,16): error TS2304: Cannot find name 'get'.\"","toBe","1"]},"operators":{"distinct":7,"total":16,"identifiers":["()","{}",":","``","const","=","."]}},"paramCount":0,"sloc":{"logical":12,"physical":18},"errors":[],"lineEnd":254,"lineStart":237,"name":"<anon method-17>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":12.5,"halstead":{"bugs":0.015,"difficulty":1.6,"effort":71.868,"length":16,"time":3.993,"vocabulary":7,"volume":44.918,"operands":{"distinct":5,"total":8,"identifiers":["test","\"works with object config exported from TS file when package.json#type=module\"","\"works with function config exported from TS file when package.json#type=module\"","\"throws if type errors are encountered when package.json#type=module\"","\"throws if syntax errors are encountered when package.json#type=module\""]},"operators":{"distinct":2,"total":8,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":8,"physical":79},"errors":[],"lineEnd":335,"lineStart":257,"name":"<anon method-18>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.092,"difficulty":5.565,"effort":1543.986,"length":56,"time":85.777,"vocabulary":31,"volume":277.435,"operands":{"distinct":23,"total":32,"identifiers":["writeFiles","DIR","\"__tests__/dummy.test.js\"","\"test('dummy', () => expect(12).toBe(12));\"","\"jest.config.ts\"","\n          import type {Config} from 'jest';\n          const config: Config = {displayName: 'ts-esm-object-config', verbose: true};\n          export default config;\n          ","\"package.json\"","\"{\"type\": \"module\"}\"","configs","globalConfig","getConfig","path","join","expect","toHaveLength","1","0","displayName","name","toBe","\"ts-esm-object-config\"","verbose","true"]},"operators":{"distinct":8,"total":24,"identifiers":["()","{}",":","``","const","=",".","[]"]}},"paramCount":0,"sloc":{"logical":15,"physical":17},"errors":[],"lineEnd":274,"lineStart":258,"name":"<anon method-19>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.667,"halstead":{"bugs":0.092,"difficulty":5.565,"effort":1543.986,"length":56,"time":85.777,"vocabulary":31,"volume":277.435,"operands":{"distinct":23,"total":32,"identifiers":["writeFiles","DIR","\"__tests__/dummy.test.js\"","\"test('dummy', () => expect(12).toBe(12));\"","\"jest.config.ts\"","\n          import type {Config} from 'jest';\n          async function getVerbose() {return true;}\n          export default async (): Promise<Config> => {\n            const verbose: Config['verbose'] = await getVerbose();\n            return {displayName: 'ts-esm-async-function-config', verbose};\n          };\n          ","\"package.json\"","\"{\"type\": \"module\"}\"","configs","globalConfig","getConfig","path","join","expect","toHaveLength","1","0","displayName","name","toBe","\"ts-esm-async-function-config\"","verbose","true"]},"operators":{"distinct":8,"total":24,"identifiers":["()","{}",":","``","const","=",".","[]"]}},"paramCount":0,"sloc":{"logical":15,"physical":20},"errors":[],"lineEnd":295,"lineStart":276,"name":"<anon method-20>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.057,"difficulty":4.813,"effort":827.246,"length":38,"time":45.958,"vocabulary":23,"volume":171.895,"operands":{"distinct":16,"total":22,"identifiers":["writeFiles","DIR","\"__tests__/dummy.test.js\"","\"test('dummy', () => expect(12).toBe(12));\"","\"jest.config.ts\"","\n          import type {Config} from 'jest';\n          const config: Config = {testTimeout: '10000'};\n          export default config;\n          ","\"package.json\"","\"{\"type\": \"module\"}\"","stderr","exitCode","runJest","expect","toMatch","\"jest.config.ts(2,25): error TS2322: Type 'string' is not assignable to type 'number'.\"","toBe","1"]},"operators":{"distinct":7,"total":16,"identifiers":["()","{}",":","``","const","=","."]}},"paramCount":0,"sloc":{"logical":12,"physical":18},"errors":[],"lineEnd":314,"lineStart":297,"name":"<anon method-21>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.057,"difficulty":4.813,"effort":827.246,"length":38,"time":45.958,"vocabulary":23,"volume":171.895,"operands":{"distinct":16,"total":22,"identifiers":["writeFiles","DIR","\"__tests__/dummy.test.js\"","\"test('dummy', () => expect(123).toBe(123));\"","\"jest.config.ts\"","\n          import type {Config} from 'jest';\n          const config: Config = {verbose: true};\n          export default get config;\n          ","\"package.json\"","\"{}\"","stderr","exitCode","runJest","expect","toMatch","\"jest.config.ts(3,16): error TS2304: Cannot find name 'get'.\"","toBe","1"]},"operators":{"distinct":7,"total":16,"identifiers":["()","{}",":","``","const","=","."]}},"paramCount":0,"sloc":{"logical":12,"physical":19},"errors":[],"lineEnd":334,"lineStart":316,"name":"<anon method-22>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]}]