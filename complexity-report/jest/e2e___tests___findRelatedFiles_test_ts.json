[{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.002,"difficulty":0.5,"effort":2.377,"length":3,"time":0.132,"vocabulary":3,"volume":4.755,"operands":{"distinct":2,"total":2,"identifiers":["cleanup","DIR"]},"operators":{"distinct":1,"total":1,"identifiers":["()"]}},"paramCount":0,"sloc":{"logical":2,"physical":1},"errors":[],"lineEnd":15,"lineStart":15,"name":"<anon method-1>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.002,"difficulty":0.5,"effort":2.377,"length":3,"time":0.132,"vocabulary":3,"volume":4.755,"operands":{"distinct":2,"total":2,"identifiers":["cleanup","DIR"]},"operators":{"distinct":1,"total":1,"identifiers":["()"]}},"paramCount":0,"sloc":{"logical":2,"physical":1},"errors":[],"lineEnd":16,"lineStart":16,"name":"<anon method-2>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.025,"difficulty":1.714,"effort":130.42,"length":24,"time":7.246,"vocabulary":9,"volume":76.078,"operands":{"distinct":7,"total":12,"identifiers":["test","\"runs tests related to filename\"","\"runs tests related to uppercased filename on case-insensitive os\"","\"runs tests related to filename with a custom dependency extractor\"","\"runs tests related to filename with a custom dependency extractor written in ESM\"","\"generates coverage report for filename\"","\"coverage configuration is applied correctly\""]},"operators":{"distinct":2,"total":12,"identifiers":["()","function=>"]}},"paramCount":0,"sloc":{"logical":12,"physical":248},"errors":[],"lineEnd":265,"lineStart":18,"name":"<anon method-3>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":4.762,"halstead":{"bugs":0.123,"difficulty":7.63,"effort":2823.261,"length":74,"time":156.848,"vocabulary":32,"volume":370,"operands":{"distinct":23,"total":39,"identifiers":["writeFiles","DIR","\".watchmanconfig\"","\"\"","\"__tests__/test.test.js\"","\n      const a = require('../a');\n      test('a', () => {});\n    ","\"a.js\"","\"module.exports = {};\"","\"package.json\"","JSON","stringify","jest","testEnvironment","\"node\"","stdout","runJest","expect","toMatch","stderr","\"--findRelatedTests\"","\"PASS __tests__/test.test.js\"","summaryMsg","\"Ran all test suites related to files matching /a.js/i.\""]},"operators":{"distinct":9,"total":35,"identifiers":["()","{}",":","``",".","const","=","[]",","]}},"paramCount":0,"sloc":{"logical":21,"physical":20},"errors":[],"lineEnd":38,"lineStart":19,"name":"<anon method-4>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":2,"cyclomaticDensity":8.696,"halstead":{"bugs":0.143,"difficulty":9.333,"effort":3995.764,"length":81,"time":221.987,"vocabulary":39,"volume":428.118,"operands":{"distinct":27,"total":42,"identifiers":["process","platform","\"win32\"","writeFiles","DIR","\".watchmanconfig\"","\"\"","\"__tests__/test.test.js\"","\n      const a = require('../a');\n      test('a', () => {});\n    ","\"a.js\"","\"module.exports = {};\"","\"package.json\"","JSON","stringify","jest","testEnvironment","\"node\"","stdout","runJest","\"A.JS\"","expect","toMatch","stderr","\"--findRelatedTests\"","\"PASS __tests__/test.test.js\"","summaryMsg","\"Ran all test suites related to files matching /A.JS/i.\""]},"operators":{"distinct":12,"total":39,"identifiers":["if","!==",".","return","()","{}",":","``","const","=","[]",","]}},"paramCount":0,"sloc":{"logical":23,"physical":25},"errors":[],"lineEnd":64,"lineStart":40,"name":"<anon method-5>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.846,"halstead":{"bugs":0.167,"difficulty":7.258,"effort":3630.928,"length":94,"time":201.718,"vocabulary":40,"volume":500.261,"operands":{"distinct":31,"total":50,"identifiers":["writeFiles","DIR","\".watchmanconfig\"","\"\"","\"__tests__/test-skip-deps.test.js\"","\n      const dynamicImport = path => Promise.resolve(require(path));\n      test('a', () => dynamicImport('../a').then(a => {\n        expect(a.foo).toBe(5);\n      }));\n      ","\"__tests__/test.test.js\"","\n        const dynamicImport = path => Promise.resolve(require(path));\n        test('a', () => dynamicImport('../a').then(a => {\n          expect(a.foo).toBe(5);\n        }));\n      ","\"a.js\"","\"module.exports = {foo: 5};\"","\"dependencyExtractor.js\"","\n        const DYNAMIC_IMPORT_RE = /(?:^|[^.]\\s*)(\\bdynamicImport\\s*?\\(\\s*?)([`'\"])([^`'\"]+)(\\2\\s*?\\))/g;\n        module.exports = {\n          extract(code, filePath) {\n            const dependencies = new Set();\n            if (filePath.includes('skip-deps')) {\n              return dependencies;\n            }\n\n            const addDependency = (match, pre, quot, dep, post) => {\n              dependencies.add(dep);\n              return match;\n            };\n            code.replace(DYNAMIC_IMPORT_RE, addDependency);\n            return dependencies;\n          },\n        };\n      ","\"package.json\"","JSON","stringify","jest","dependencyExtractor","\"<rootDir>/dependencyExtractor.js\"","testEnvironment","\"node\"","stdout","runJest","expect","toMatch","stderr","\"--findRelatedTests\"","\"PASS __tests__/test.test.js\"","not","\"PASS __tests__/test-skip-deps.test.js\"","summaryMsg","\"Ran all test suites related to files matching /a.js/i.\""]},"operators":{"distinct":9,"total":44,"identifiers":["()","{}",":","``",".","const","=","[]",","]}},"paramCount":0,"sloc":{"logical":26,"physical":52},"errors":[],"lineEnd":117,"lineStart":66,"name":"<anon method-6>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.846,"halstead":{"bugs":0.167,"difficulty":7.258,"effort":3630.928,"length":94,"time":201.718,"vocabulary":40,"volume":500.261,"operands":{"distinct":31,"total":50,"identifiers":["writeFiles","DIR","\".watchmanconfig\"","\"\"","\"__tests__/test-skip-deps.test.js\"","\n      const dynamicImport = path => Promise.resolve(require(path));\n      test('a', () => dynamicImport('../a').then(a => {\n        expect(a.foo).toBe(5);\n      }));\n      ","\"__tests__/test.test.js\"","\n        const dynamicImport = path => Promise.resolve(require(path));\n        test('a', () => dynamicImport('../a').then(a => {\n          expect(a.foo).toBe(5);\n        }));\n      ","\"a.js\"","\"module.exports = {foo: 5};\"","\"dependencyExtractor.mjs\"","\n        const DYNAMIC_IMPORT_RE = /(?:^|[^.]\\s*)(\\bdynamicImport\\s*?\\(\\s*?)([`'\"])([^`'\"]+)(\\2\\s*?\\))/g;\n        export function extract(code, filePath) {\n          const dependencies = new Set();\n          if (filePath.includes('skip-deps')) {\n            return dependencies;\n          }\n          const addDependency = (match, pre, quot, dep, post) => {\n            dependencies.add(dep);\n            return match;\n          };\n          code.replace(DYNAMIC_IMPORT_RE, addDependency);\n          return dependencies;\n        };\n      ","\"package.json\"","JSON","stringify","jest","dependencyExtractor","\"<rootDir>/dependencyExtractor.mjs\"","testEnvironment","\"node\"","stdout","runJest","expect","toMatch","stderr","\"--findRelatedTests\"","\"PASS __tests__/test.test.js\"","not","\"PASS __tests__/test-skip-deps.test.js\"","summaryMsg","\"Ran all test suites related to files matching /a.js/i.\""]},"operators":{"distinct":9,"total":44,"identifiers":["()","{}",":","``",".","const","=","[]",","]}},"paramCount":0,"sloc":{"logical":26,"physical":49},"errors":[],"lineEnd":167,"lineStart":119,"name":"<anon method-7>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":2,"halstead":{"bugs":0.267,"difficulty":11.286,"effort":9049.005,"length":146,"time":502.722,"vocabulary":45,"volume":801.811,"operands":{"distinct":35,"total":79,"identifiers":["writeFiles","DIR","\".watchmanconfig\"","\"\"","\"__tests__/a.test.js\"","\n        require('../a');\n        require('../b');\n        test('a', () => expect(1).toBe(1));\n      ","\"__tests__/b.test.js\"","\n        require('../b');\n        test('b', () => expect(1).toBe(1));\n      ","\"a.js\"","\"module.exports = {}\"","\"b.js\"","\"package.json\"","JSON","stringify","jest","collectCoverage","true","testEnvironment","\"node\"","stdout","stderr","runJest","stripAnsi","summary","rest","extractSummary","expect","toMatchSnapshot","split","\"\n\"","map","s","sort","join","\"--findRelatedTests\""]},"operators":{"distinct":10,"total":67,"identifiers":["()","{}",":","``",".","let","=","[]","function=>",","]}},"paramCount":0,"sloc":{"logical":50,"physical":50},"errors":[],"lineEnd":218,"lineStart":169,"name":"<anon method-8>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["s","trim"]},"operators":{"distinct":2,"total":2,"identifiers":["()","."]}},"paramCount":1,"sloc":{"logical":2,"physical":1},"errors":[],"lineEnd":199,"lineStart":199,"name":"<anon method-9>","paramNames":["s"],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":2.222,"halstead":{"bugs":0.28,"difficulty":11.423,"effort":9606.06,"length":149,"time":533.67,"vocabulary":50,"volume":840.935,"operands":{"distinct":39,"total":81,"identifiers":["writeFiles","DIR","\".watchmanconfig\"","\"\"","\"__tests__/a.test.js\"","\n        require('../a');\n        test('a', () => expect(1).toBe(1));\n      ","\"a.js\"","\"module.exports = {}\"","\"b.js\"","\"package.json\"","JSON","stringify","jest","collectCoverage","true","collectCoverageFrom","\"!b.js\"","testEnvironment","\"node\"","stdout","stderr","runJest","\"--findRelatedTests\"","stripAnsi","summary","rest","extractSummary","expect","toMatchSnapshot","split","\"\n\"","map","s","sort","join","toMatch","not","\"No tests found\"","toBe"]},"operators":{"distinct":11,"total":68,"identifiers":["()","{}",":","``",".","[]",",","let","=","const","function=>"]}},"paramCount":0,"sloc":{"logical":45,"physical":45},"errors":[],"lineEnd":264,"lineStart":220,"name":"<anon method-10>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.003,"difficulty":1,"effort":8,"length":4,"time":0.444,"vocabulary":4,"volume":8,"operands":{"distinct":2,"total":2,"identifiers":["s","trim"]},"operators":{"distinct":2,"total":2,"identifiers":["()","."]}},"paramCount":1,"sloc":{"logical":2,"physical":1},"errors":[],"lineEnd":249,"lineStart":249,"name":"<anon method-11>","paramNames":["s"],"maxNestedMethodDepth":0,"nestedMethods":[]}]