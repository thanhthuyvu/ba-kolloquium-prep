[{"cyclomatic":1,"cyclomaticDensity":33.333,"halstead":{"bugs":0.012,"difficulty":1,"effort":34.869,"length":11,"time":1.937,"vocabulary":9,"volume":34.869,"operands":{"distinct":7,"total":7,"identifiers":["fs","readFileSync","path","join","TESTS_DIR","filename","\"utf8\""]},"operators":{"distinct":2,"total":4,"identifiers":["()","."]}},"paramCount":1,"sloc":{"logical":3,"physical":2},"errors":[],"lineEnd":17,"lineStart":16,"name":"<anon method-1>","paramNames":["filename"],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.002,"difficulty":0.5,"effort":2.377,"length":3,"time":0.132,"vocabulary":3,"volume":4.755,"operands":{"distinct":2,"total":2,"identifiers":["cleanup","TESTS_DIR"]},"operators":{"distinct":1,"total":1,"identifiers":["()"]}},"paramCount":0,"sloc":{"logical":2,"physical":1},"errors":[],"lineEnd":19,"lineStart":19,"name":"<anon method-2>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":50,"halstead":{"bugs":0.002,"difficulty":0.5,"effort":2.377,"length":3,"time":0.132,"vocabulary":3,"volume":4.755,"operands":{"distinct":2,"total":2,"identifiers":["cleanup","TESTS_DIR"]},"operators":{"distinct":1,"total":1,"identifiers":["()"]}},"paramCount":0,"sloc":{"logical":2,"physical":1},"errors":[],"lineEnd":20,"lineStart":20,"name":"<anon method-3>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":1.667,"halstead":{"bugs":0.392,"difficulty":13.714,"effort":16148.564,"length":217,"time":897.142,"vocabulary":43,"volume":1177.499,"operands":{"distinct":35,"total":120,"identifiers":["filename","\"basic-support.test.js\"","template","makeTemplate","\"test('inline snapshots', () => expect($1).toMatchInlineSnapshot());\n\"","writeFiles","TESTS_DIR","\"{apple: \"original value\"}\"","stderr","exitCode","runJest","DIR","\"-w=1\"","\"--ci=false\"","fileAfter","readFile","expect","toMatch","\"1 snapshot written from 1 test suite.\"","toBe","0","toMatchSnapshot","\"initial write\"","\"Snapshots:   1 passed, 1 total\"","not","\"snapshot passed\"","replace","\"original value\"","\"updated value\"","\"Snapshot name: `inline snapshots 1`\"","1","\"snapshot mismatch\"","\"-u\"","\"1 snapshot updated from 1 test suite.\"","\"snapshot updated\""]},"operators":{"distinct":8,"total":97,"identifiers":["const","=","()","{}",":","[]",",","."]}},"paramCount":0,"sloc":{"logical":60,"physical":50},"errors":[],"lineEnd":71,"lineStart":22,"name":"<anon method-4>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":3.125,"halstead":{"bugs":0.195,"difficulty":9.692,"effort":5670.564,"length":115,"time":315.031,"vocabulary":34,"volume":585.058,"operands":{"distinct":26,"total":63,"identifiers":["filename","\"empty-line-indent.test.js\"","template","makeTemplate","\"test('inline snapshots', () => expect($1).toMatchInlineSnapshot());\n\"","writeFiles","TESTS_DIR","\"`hello\n\nworld`\"","stderr","exitCode","runJest","DIR","\"-w=1\"","\"--ci=false\"","fileAfter","readFile","expect","toMatch","\"1 snapshot written from 1 test suite.\"","toBe","0","toMatchSnapshot","\"initial write\"","\"Snapshots:   1 passed, 1 total\"","not","\"snapshot passed\""]},"operators":{"distinct":8,"total":52,"identifiers":["const","=","()","{}",":","[]",",","."]}},"paramCount":0,"sloc":{"logical":32,"physical":26},"errors":[],"lineEnd":98,"lineStart":73,"name":"<anon method-5>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":1.563,"halstead":{"bugs":0.421,"difficulty":15.875,"effort":20052.129,"length":230,"time":1114.007,"vocabulary":45,"volume":1263.126,"operands":{"distinct":36,"total":127,"identifiers":["filename","\"handle-property-matchers.test.js\"","template","makeTemplate","test('handles property matchers', () => {\n      expect({createdAt: $1}).toMatchInlineSnapshot({createdAt: expect.any(Date)});\n    });\n    ","writeFiles","TESTS_DIR","\"new Date()\"","stderr","exitCode","runJest","DIR","\"-w=1\"","\"--ci=false\"","fileAfter","readFile","expect","toMatch","\"1 snapshot written from 1 test suite.\"","toBe","0","toMatchSnapshot","\"initial write\"","\"Snapshots:   1 passed, 1 total\"","\"snapshot passed\"","replace","\"\"string\"\"","\"Snapshot name: `handles property matchers 1`\"","\"Snapshots:   1 failed, 1 total\"","1","\"snapshot failed\"","\"any(Date)\"","\"any(String)\"","\"-u\"","\"1 snapshot updated from 1 test suite.\"","\"snapshot updated\""]},"operators":{"distinct":9,"total":103,"identifiers":["const","=","()","``","{}",":","[]",",","."]}},"paramCount":0,"sloc":{"logical":64,"physical":52},"errors":[],"lineEnd":151,"lineStart":100,"name":"<anon method-6>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":1.786,"halstead":{"bugs":0.391,"difficulty":14.125,"effort":16581.649,"length":208,"time":921.203,"vocabulary":50,"volume":1173.922,"operands":{"distinct":40,"total":113,"identifiers":["filename","\"removes-obsolete-external-snapshots.test.js\"","snapshotPath","path","join","TESTS_DIR","\"__snapshots__\"",".snap","template","makeTemplate","\n    test('removes obsolete external snapshots', () => {\n      expect('1').$1();\n    });\n  ","writeFiles","\"toMatchSnapshot\"","stderr","exitCode","runJest","DIR","\"-w=1\"","\"--ci=false\"","fileAfter","readFile","expect","toMatch","\"1 snapshot written from 1 test suite.\"","toBe","0","toMatchSnapshot","\"initial write\"","fs","existsSync","toEqual","true","\"toMatchInlineSnapshot\"","\"Snapshots:   1 obsolete, 1 written, 1 total\"","1","\"inline snapshot written\"","\"-u\"","\"Snapshots:   1 file removed, 1 passed, 1 total\"","\"external snapshot cleaned\"","false"]},"operators":{"distinct":10,"total":95,"identifiers":["const","=","()",".","``","${}","{}",":","[]",","]}},"paramCount":0,"sloc":{"logical":56,"physical":47},"errors":[],"lineEnd":199,"lineStart":153,"name":"<anon method-7>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.094,"difficulty":6.975,"effort":1965.296,"length":58,"time":109.183,"vocabulary":29,"volume":281.763,"operands":{"distinct":20,"total":31,"identifiers":["filename","\"async-matchers.test.js\"","test","\n    test('inline snapshots', async () => {\n      expect(Promise.resolve('success')).resolves.toMatchInlineSnapshot();\n      expect(Promise.reject('fail')).rejects.toMatchInlineSnapshot();\n    });\n  ","writeFiles","TESTS_DIR","stderr","exitCode","runJest","DIR","\"-w=1\"","\"--ci=false\"","fileAfter","readFile","expect","toMatch","\"2 snapshots written from 1 test suite.\"","toBe","0","toMatchSnapshot"]},"operators":{"distinct":9,"total":27,"identifiers":["const","=","``","()","{}",":","[]",",","."]}},"paramCount":0,"sloc":{"logical":16,"physical":16},"errors":[],"lineEnd":216,"lineStart":201,"name":"<anon method-8>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.094,"difficulty":6.975,"effort":1965.296,"length":58,"time":109.183,"vocabulary":29,"volume":281.763,"operands":{"distinct":20,"total":31,"identifiers":["filename","\"async.test.js\"","test","\n    test('inline snapshots', async () => {\n      await 'next tick';\n      expect(42).toMatchInlineSnapshot();\n    });\n  ","writeFiles","TESTS_DIR","stderr","exitCode","runJest","DIR","\"-w=1\"","\"--ci=false\"","fileAfter","readFile","expect","toMatch","\"1 snapshot written from 1 test suite.\"","toBe","0","toMatchSnapshot"]},"operators":{"distinct":9,"total":27,"identifiers":["const","=","``","()","{}",":","[]",",","."]}},"paramCount":0,"sloc":{"logical":16,"physical":16},"errors":[],"lineEnd":233,"lineStart":218,"name":"<anon method-9>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.094,"difficulty":6.975,"effort":1965.296,"length":58,"time":109.183,"vocabulary":29,"volume":281.763,"operands":{"distinct":20,"total":31,"identifiers":["filename","\"async.test.js\"","test","\n    it('works with inline snapshots', () => {\n      expect({a: 1}).toMatchInlineSnapshot();\n    });\n  ","writeFiles","TESTS_DIR","stderr","exitCode","runJest","DIR","\"-w=1\"","\"--ci=false\"","fileAfter","readFile","expect","toMatch","\"1 snapshot written from 1 test suite.\"","toBe","0","toMatchSnapshot"]},"operators":{"distinct":9,"total":27,"identifiers":["const","=","``","()","{}",":","[]",",","."]}},"paramCount":0,"sloc":{"logical":16,"physical":16},"errors":[],"lineEnd":250,"lineStart":235,"name":"<anon method-10>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":8.333,"halstead":{"bugs":0.072,"difficulty":6.618,"effort":1430.869,"length":46,"time":79.493,"vocabulary":26,"volume":216.22,"operands":{"distinct":17,"total":25,"identifiers":["filename","\"mockFail.test.js\"","test","\n    jest.mock('path', () => ({}));\n    jest.mock('fs', () => ({}));\n    jest.mock('graceful-fs', () => ({}));\n    test('inline snapshots', () => {\n      expect({}).toMatchInlineSnapshot();\n    });\n  ","writeFiles","TESTS_DIR","stderr","exitCode","runJest","DIR","\"-w=1\"","\"--ci=false\"","expect","toMatch","\"1 snapshot written from 1 test suite.\"","toBe","0"]},"operators":{"distinct":9,"total":21,"identifiers":["const","=","``","()","{}",":","[]",",","."]}},"paramCount":0,"sloc":{"logical":12,"physical":16},"errors":[],"lineEnd":268,"lineStart":253,"name":"<anon method-11>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.097,"difficulty":6.857,"effort":1985.188,"length":59,"time":110.288,"vocabulary":30,"volume":289.507,"operands":{"distinct":21,"total":32,"identifiers":["filename","\"custom-matchers.test.js\"","test","\n    const { toMatchInlineSnapshot } = require('jest-snapshot');\n    expect.extend({\n      toMatchCustomInlineSnapshot(received, ...args) {\n        return toMatchInlineSnapshot.call(this, received, ...args);\n      }\n    });\n    test('inline snapshots', () => {\n      expect({apple: \"original value\"}).toMatchCustomInlineSnapshot();\n    });\n  ","writeFiles","TESTS_DIR","stderr","exitCode","runJest","DIR","\"-w=1\"","\"--ci=false\"","fileAfter","readFile","expect","toMatch","\"1 snapshot written from 1 test suite.\"","toBe","0","toMatchSnapshot","\"custom matchers\""]},"operators":{"distinct":9,"total":27,"identifiers":["const","=","``","()","{}",":","[]",",","."]}},"paramCount":0,"sloc":{"logical":16,"physical":21},"errors":[],"lineEnd":290,"lineStart":270,"name":"<anon method-12>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.097,"difficulty":6.857,"effort":1985.188,"length":59,"time":110.288,"vocabulary":30,"volume":289.507,"operands":{"distinct":21,"total":32,"identifiers":["filename","\"custom-matchers-with-property-matcher.test.js\"","test","\n    const { toMatchInlineSnapshot } = require('jest-snapshot');\n    expect.extend({\n      toMatchCustomInlineSnapshot(received, ...args) {\n        return toMatchInlineSnapshot.call(this, received, ...args);\n      },\n      toMatchUserInlineSnapshot(received, ...args) {\n        return toMatchInlineSnapshot.call(\n          this,\n          received,\n          {\n            createdAt: expect.any(Date),\n            id: expect.any(Number),\n          },\n          ...args\n        );\n      },\n    });\n    test('inline snapshots', () => {\n      const user = {\n        createdAt: new Date(),\n        id: Math.floor(Math.random() * 20),\n        name: 'LeBron James',\n      };\n      expect(user).toMatchCustomInlineSnapshot({\n        createdAt: expect.any(Date),\n        id: expect.any(Number),\n      });\n      expect(user).toMatchUserInlineSnapshot();\n    });\n  ","writeFiles","TESTS_DIR","stderr","exitCode","runJest","DIR","\"-w=1\"","\"--ci=false\"","fileAfter","readFile","expect","toMatch","\"2 snapshots written from 1 test suite.\"","toBe","0","toMatchSnapshot","\"custom matchers with property matcher\""]},"operators":{"distinct":9,"total":27,"identifiers":["const","=","``","()","{}",":","[]",",","."]}},"paramCount":0,"sloc":{"logical":16,"physical":41},"errors":[],"lineEnd":332,"lineStart":292,"name":"<anon method-13>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.097,"difficulty":6.857,"effort":1985.188,"length":59,"time":110.288,"vocabulary":30,"volume":289.507,"operands":{"distinct":21,"total":32,"identifiers":["filename","\"multiple-matchers.test.js\"","test","\n    const { toMatchInlineSnapshot } = require('jest-snapshot');\n    expect.extend({\n      toMatchCustomInlineSnapshot(received, ...args) {\n        return toMatchInlineSnapshot.call(this, received, ...args);\n      },\n      toMatchCustomInlineSnapshot2(received, ...args) {\n        return toMatchInlineSnapshot.call(this, received, ...args);\n      },\n    });\n    test('inline snapshots', () => {\n      expect({apple: \"value 1\"}).toMatchCustomInlineSnapshot();\n      expect({apple: \"value 2\"}).toMatchInlineSnapshot();\n      expect({apple: \"value 3\"}).toMatchCustomInlineSnapshot2();\n      expect({apple: \"value 4\"}).toMatchInlineSnapshot();\n    });\n  ","writeFiles","TESTS_DIR","stderr","exitCode","runJest","DIR","\"-w=1\"","\"--ci=false\"","fileAfter","readFile","expect","toMatch","\"4 snapshots written from 1 test suite.\"","toBe","0","toMatchSnapshot","\"multiple matchers\""]},"operators":{"distinct":9,"total":27,"identifiers":["const","=","``","()","{}",":","[]",",","."]}},"paramCount":0,"sloc":{"logical":16,"physical":27},"errors":[],"lineEnd":360,"lineStart":334,"name":"<anon method-14>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.097,"difficulty":6.857,"effort":1985.188,"length":59,"time":110.288,"vocabulary":30,"volume":289.507,"operands":{"distinct":21,"total":32,"identifiers":["filename","\"existing-snapshot.test.js\"","test","\n    test('existing snapshot', () => {\n      expect({ hello: 'world' }).toMatchInlineSnapshot(`\n        Object {\n          \"hello\": \"world\",\n        }\n      `);\n      expect({ hello: 'world' }).toMatchInlineSnapshot();\n    });\n  ","writeFiles","TESTS_DIR","stderr","exitCode","runJest","DIR","\"-w=1\"","\"--ci=false\"","fileAfter","readFile","expect","toMatch","\"1 snapshot written from 1 test suite.\"","toBe","0","toMatchSnapshot","\"existing snapshot\""]},"operators":{"distinct":9,"total":27,"identifiers":["const","=","``","()","{}",":","[]",",","."]}},"paramCount":0,"sloc":{"logical":16,"physical":20},"errors":[],"lineEnd":381,"lineStart":362,"name":"<anon method-15>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]},{"cyclomatic":1,"cyclomaticDensity":6.25,"halstead":{"bugs":0.097,"difficulty":6.857,"effort":1985.188,"length":59,"time":110.288,"vocabulary":30,"volume":289.507,"operands":{"distinct":21,"total":32,"identifiers":["filename","\"existing-snapshot.test.js\"","test","\n    it('is true', () => {\n      expect(true).toMatchInlineSnapshot(`true`);\n      expect([1, 2, 3]).toMatchInlineSnapshot();\n    });\\n\n  ","writeFiles","TESTS_DIR","stderr","exitCode","runJest","DIR","\"-w=1\"","\"--ci=false\"","fileAfter","readFile","expect","toMatch","\"1 snapshot written from 1 test suite.\"","toBe","0","toMatchSnapshot","\"existing snapshot\""]},"operators":{"distinct":9,"total":27,"identifiers":["const","=","``","()","{}",":","[]",",","."]}},"paramCount":0,"sloc":{"logical":16,"physical":16},"errors":[],"lineEnd":398,"lineStart":383,"name":"<anon method-16>","paramNames":[],"maxNestedMethodDepth":0,"nestedMethods":[]}]